REM > 6502Em
master=FALSE
*RMENSURE 6502Support 0.00 RMLoad <6502Em$Res>.65Support
ON ERROR PROCerror
REM

IO_Podule%=FALSE
tube=FALSE

DIM opcode(&100), bcd(&100), code 500*1024, buffer 1000
DIM l%(100)
DIM divloop1(10),divloop2(10),divjump(10)
div%=0
LIBRARY "<6502Em$Dir>.AllSource.Sound6sh"
LIBRARY "<6502Em$Dir>.AllSource.Opcodes_m"
LIBRARY "<6502Em$Dir>.AllSource.Screensh"

electron%=TRUE
PROCassemble

PRINT(end-start)/1024
OSCLI "Save <6502Em$Dir>.CodeE "+STR$~code+" "+STR$~(end+code)
OSCLI "SetType <6502Em$Dir>.CodeE Data"

END

OSCLI"LOAD <6502Em$Dir>.OS1,2 "+STR$~(memory+&C000)
OSCLI"LOAD <6502Em$Dir>.BASICII "+STR$~(memory+&8000)

MODE 12
CALL init+code
PRINT"BOO"

!pc_store=&D9CD << 16

D%=memory : REM R3
CALL start+code

END
DEFPROCassemble
PROCclearmem(code,code+200*1024)
R=1000 : S=1000 : T=1000

A=4
X=5
Y=6
F=7
zSP=8
mem=3
time=9
zpc=10
table=11

a=-&100+0
x=-&100+4
y=-&100+8
f=-&100+12
sp=-&100+16
pc_store=-&100+20
T1mode=-&100+24
T2mode=-&100+25
T3mode=-&100+26
T4mode=-&100+27
T1=-&100+28
T1R=-&100+32
T2=-&100+36
T2R=-&100+40
T3=-&100+44
T3R=-&100+48
T4=-&100+52
T4R=-&100+56
screen=-&100+60
screenR=-&100+64
min=-&100+68
sound_timer=-&100+72
ifr=-&100+76
ier=-&100+77
ifr2=-&100+78
ier2=-&100+79
arc_screenstart=-&100+80
tamper=-&100+84
cursor_tamper=-&100+88
ROMSEL_ON=-&100+92
rom=-&100+96
ROMRAM=-&100+100
fe20=-&100+116
tape_handle=-&100+117
crt_regs=-&100+120
scratch=-&100+140
pal_regs=-&100+148
Palette=-&100+164
ACCCON=-&100+172
patch_on=-&100+176
pal_tamper=-&100+177
lastmode=-&100+178
fe10=-&100+179
tape_count=-&100+180
key_addr=-&100+184
Elatch=-&100+188
Eifr=-&100+189
Eier=-&100+190
ROMint=-&100+191
speedR=-&100+196
enD=-&100+192

enD=-&100+200 : REM don't go past this

FORp=4 TO 6 STEP 2
div%=0
O%=code
l%=0
P%=0
opcode%=0
[OPTp
.Oa                            EQUD 0
.Ox                            EQUD 0
.Oy                            EQUD 0
.Of                            EQUD 0
.Osp                           EQUD 0
.Opc_store                     EQUD 0
.start_offset                 EQUD start
.trace                        EQUD 0
.trace2                       EQUD 0
.init_addr                    EQUD init
.crt_addr                     EQUD 0 ; was crt_regs
.T1_addr                      EQUD 0 ; was T1
.ifr_addr                     EQUD 0 ; ifr
.column_counter_addr          EQUD 0 ; column_counter
.ROMSEL_addr                  EQUD 0 ; ROMSEL
.Palette_addr                 EQUD 0 ; Palette
.speed_addr                   EQUD screen_count+4
.elite_addr                   EQUD 0 ; elite
.opco_addr                    EQUD opcode(0) ; opcodetable
.bcd_addr                     EQUD bcd(0)
.sheila_writetab_addr         EQUD sheila_writetab
.sheila_readtab_addr          EQUD sheila_readtab
.sound_vectors_addr           EQUD sound_buffs_addr
.patch_addr                   EQUD patch_screen

.init ; only called once, before code called
ADR R0,0
;LDR R1,opco_addr
;ADD R1,R1,R0
;LDR R2,bcd_addr
;ADD R2,R2,R0
LDR R5,sheila_writetab_addr
ADD R5,R5,R0
LDR R6,sheila_readtab_addr
ADD R6,R6,R0
MOV R3,#255
.init_loop
;LDR R4,[R1,R3,LSL#2]
;ADD R4,R4,R0
;STR R4,[R1,R3,LSL#2]
;LDR R4,[R2,R3,LSL#2]
;ADD R4,R4,R0
;STR R4,[R2,R3,LSL#2]
LDR R4,[R5,R3,LSL#2]
ADD R4,R4,R0
STR R4,[R5,R3,LSL#2]
LDR R4,[R6,R3,LSL#2]
ADD R4,R4,R0
STR R4,[R6,R3,LSL#2]
SUBS R3,R3,#1

BPL init_loop
MOV PC,R14

.start
STMFD R13!,{R1-R12,R14}
STR R13,return_addr
STR R0,roms_addr
;LDR R0,crt_addr
;ADR R1,0
;ADD R0,R0,R1
;SWI "6502_Init"
;MOV R0,#&4000
;STR R0,[mem,#screenR]
;MOV R0,#&9C00 : ;ADD R0,R0,#&40
;STR R0,[mem,#T1R]
;
MOV R0,R0,LSR#2
STR R0,[mem,#T1]
MOV R0,R0,LSR#2
STR R0,[mem,#screen]

;SWI "6502_Getkeyaddr"
SWI "6502_GetElectronKeys"
STR R0,[mem,#key_addr]

ADR R0,block1
ADD R1,R0,#8
SWI "OS_ReadVduVariables"
LDR R9,[R1]     ; screenstart
STR R9,[mem,#arc_screenstart]
MOV R9,#1
STRB R9,[mem,#tamper]
STRB R9,[mem,#pal_tamper]
STRB R9,[mem,#cursor_tamper]

LDR A,[mem,#a]
LDR X,[mem,#x]
LDR Y,[mem,#y]
LDR zSP,[mem,#sp] : ORR zSP,zSP,#1
LDR F,[mem,#f]
LDR zpc,[mem,#pc_store]

BL recalc_wrap

LDRB R0,[mem,#patch_on]
AND R0,R0,#%111
BIC F,F,#&FF00
ORR F,F,R0,LSL#8

MOV time,#0

LDRB R0,fe08_read
BIC R0,R0,#&81
STRB R0,fe08_read

ADR R0,0
TST F,#%1000
LDREQ table,opco_addr
LDRNE table,bcd_addr
ADD table,table,R0
;SWI "6502_ReInit"
;SWI "6502_UpdateScreen
BL poke_updatepixelV
BL updatescreen
B fetch2

.reset_bcdflag
ADR R1,0
TST F,#%1000
LDREQ table,opco_addr
LDRNE table,bcd_addr
ADD table,table,R1
MOV PC,R14

.block1
EQUD 149 : EQUD -1
.block2
EQUD 0 : EQUD 0

.screen_count
EQUD 0
EQUD 0

.reg_comp
EQUD &F4DF << 16

.trace_on
MOV R12,#1
STRB R12,trace
MOV PC,R14

.show_regs

CMP zpc,#&8000 << 16
MOVHS PC,R14

LDRB R0,trace2
CMP R0,#1
BEQ trace_skip
;MOVNE PC,R14

;LDR R0,reg_comp
;CMP R0,zpc
;SWIEQ &100+ASC"X"
;MOVNE PC,R14

SWI "6502_Checkkdata"
CMP R0,#&1F ; Insert
MOVEQ R1,#1
STREQ R1,trace2

MOV PC,R14

MOVEQ R0,#1
STREQB R0,trace

LDRB R0,trace
CMP R0,#1
MOVNE PC,14

.trace_skip
FNshowregs
MOV PC,R14



.keychk
EQUD 0

.fetch2

LDR R0,[mem,#min]
SUB R0,R0,time
LDR R1,[mem,#sound_timer]
SUB R1,R1,R0
STR R1,[mem,#sound_timer]


MOV R0,#0 : STR R0,keychk
LDR R0,[mem,#min]
SUB R0,R0,time ; ***
LDR R1,[mem,#screen]
SUBS R1,R1,R0
STRGT R1,[mem,#screen]
BLLE vsync

LDR R0,[mem,#min]
SUB R0,R0,time ; ***
LDR R1,speed
SUBS R1,R1,R0
STRGT R1,speed
BLLE speed_control

; LDR R0,[mem,#T1mode]
; TST R0,#%1
; BEQ skip_timer1

LDR R0,[mem,#min]
SUB R0,R0,time ; ***
LDR R1,[mem,#T1]
SUBS R1,R1,R0
STRGT R1,[mem,#T1]
BLLE timer1
.skip_timer1

LDR R0,[mem,#min]
SUB R0,R0,time
LDR R1,[mem,#tape_count]
SUBS R1,R1,R0
STRGT R1,[mem,#tape_count]
BLLE tape_fetch


TST F,#%100
BNE skip_do_interrupt

;.do_interrupt

LDRB R1,[mem,#Eifr]
;TST R1,#%1000000
;SWINE &100+ASC"6"
AND R1,R1,#%01111100


;AND R1,R1,#%01110000 ; ????????????????



LDRB R2,[mem,#Eier]

ANDS R1,R1,R2

;TST R1,#%1000000
;SWINE &100+ASC"6"
;TST R1,#%100000
;SWINE &100+ASC"5"
;TST R1,#%10000
;SWINE &100+ASC"4"
;TST R1,#%1000

;SWINE &100+ASC"3"
;TST R1,#%100
;SWINE &100+ASC"2"
;CMP R1,#0

BEQ skip_do_interrupt

.do_interrupt
FNdo_interrupt

.skip_do_interrupt

;BL keyboard MOVED TO CLI!!!
BL keys2
.skip_keys
LDR time,[mem,#T1]
;MOV time,time,LSR#15
LDR R1,[mem,#screen]
CMP R1,#0 : MOVEQ R1,time
CMP R1,time
MOVLT time,R1

LDR R1,[mem,#tape_count]
CMP R1,time
MOVLT time,R1

CMP time,#0 : MOVEQ time,#1
STR time,[mem,#min]
FNfetch2

.interrupt ; called by CLI
MOV PC,R14

LDRB R1,[mem,#Eifr]
;AND R1,R1,#%00110000
LDRB R2,[mem,#Eier]

ANDS R1,R1,R2
MOVEQ PC,R14

;TST R1,#%100000
;SWINE &100+ASC"5"
;TST R1,#%1000000
;SWINE &100+ASC"6"

FNdo_interrupt

MOV PC,R14

.F10temp
EQUD 0

.F10
SWI "6502_Getkdata"
STR R14,F10temp
MOV R0,#255
STRB R0,[mem,#lastmode]
BL updatescreen
;BL force_update_pal
LDR PC,F10temp

;.fetch3
.keys2
SWI "6502_Checkkdata"
CMP R0,#&1F ; Insert
MOVEQ R1,#1
STREQ R1,trace2
CMP R0,#10 ; F10
BEQ F10
CMP R0,#11 ; F11
CMPNE R0,#12 ; F12
CMPNE R0,#15 ; break
BEQ raw_exit2
MOV PC,R14

.keyboard ; called by CLI

MOV R0,#1 : STR R0,keychk
SWI "6502_Getkdata"
CMP R0,#&FF : MOVEQ PC,R14
CMP R0,#&1F ; Insert
MOVEQ R1,#1
STREQ R1,trace2
CMP R0,#10 ; F10
BEQ F10
CMP R0,#15
CMPNE R0,#12
CMPNE R0,#11 ; F11
BEQ raw_exit

;CMP R0,#0 ; escape
;LDREQB R0,[mem,#&FF]
;ORREQ R0,R0,#&80
;STREQB R0,[mem,#&FF]
LDRB R0,[R1,R0]
CMP R0,#&FF
;BEQ not_keyboard
MOVEQ PC,R14

;B not_keyboard
CMP R0,#10 ; shift, ctrl
MOVLT PC,R14
LDRB R1,[mem,#ifr]
ORR R1,R1,#%1 ; interrupt is from keyboard
STRB R1,[mem,#ifr]
LDRB R0,[mem,#ier]
TST R0,#%1
MOVEQ PC,R14
FNdo_interrupt
MOV PC,R14



.mono_time
EQUD 0
.speed
EQUD 0

.speed_control
LDR R0,[mem,#speedR]
ADD R1,R1,R0
STR R1,speed

LDR R1,mono_time
.mono_loop
SWI "OS_ReadMonotonicTime"
MOV R0,R0,LSR#1
CMP R0,R1
BEQ mono_loop
STR R0,mono_time

MOV PC,R14

.vsync
STR R14,vsyncR14
;MOV R0,#19
;SWI "OS_Byte"

;LDRB R0,ldrb40_tamper
;CMP R0,#1 : ;BLEQ ldrb40_update


LDR R0,[mem,#speedR] ; screenR
ADD R1,R1,R0
STR R1,[mem,#screen]


;BL trace_on

;LDRB R1,screen_count
;SUBS R1,R1,#1
;LDRMIB R1,screen_count+4
;STRB R1,screen_count
LDR R0,[mem,#tamper]
CMP R0,#0

BEQ no_tamper
MOV R0,#0
STR R0,[mem,#tamper]
;SWI "6502_UpdateScreen"
BL recalc_wrap
BL updatescreen
TST F,#1 << 10 ; cursor on?
;BLNE define_cursor
;BLNE cursor
.no_tamper
LDRB R0,[mem,#pal_tamper]
CMP R0,#0
BLNE update_pal


LDR R0,[mem,#cursor_tamper]
CMP R0,#0
;BLNE cursor


;SUB R0,mem,#512 ; sheila
;LDRB R1,[R0,#&20]
;TST R1,#%10 ; teletext?
;SWINE "6502_UpdateScreen"
;BLNE updatescreen
;ADD R0,R0,#&4D
;LDRB R1,[R0]
;LDRB R2,[R0,#1]



LDRB R1,[mem,#Eifr]
ORR R1,R1,#%100 ; interrupt is from vsync
STRB R1,[mem,#Eifr]

;TST F,#1 << 9
;BEQ skip_exact

;LDR R1,mono_time
;.mono_loop
;SWI "OS_ReadMonotonicTime"
;MOV R0,R0,LSR#1
;CMP R0,R1
;BEQ mono_loop
;STR R0,mono_time

.skip_exact

LDR PC,vsyncR14
.vsyncR14
EQUD 0



.timer1
LDR R0,[mem,#speedR] ; was T1R
ADD R1,R1,R0
STR R1,[mem,#T1]

LDRB R1,[mem,#Eifr]
ORR R1,R1,#%1000 ; interrupt is from RTC
STRB R1,[mem,#Eifr]

MOV PC,R14



;.trace2
;EQUD 0

.reset
;MOV R1,#1
;STR R1,trace
MOV R0,#15 : MOV R1,#0 : SWI "OS_Byte"
MOV R0,#&10000
SUB R0,R0,#4
LDR R0,[mem,R0]
MOV zpc,R0,LSL#16
BIC F,F,#%1000 ; clear Decimal mode
ORR F,F,#%100  ; set interrupt disable
FNfetch2


.exit
MOV R0,#0
.raw_exit2
SWI "6502_Getkdata"
.raw_exit
STR A,[mem,#a]
STR X,[mem,#x]
STR Y,[mem,#y]
STR zSP,[mem,#sp]
STR F,[mem,#f]
STR zpc,[mem,#pc_store]
LDR R13,return_addr
LDMFD R13!,{R1-R12,PC}
;MOV PC,R14

.return_addr
EQUD 0

.roms_addr
EQUD 0


.fe08_read
.casette_read
EQUB 0
.fe08_write
EQUB 0
.fe09
EQUB 0
;.fe10
;EQUB 0
ALIGN
.tbuffer
EQUD 0

.read_tape_data
LDRB R0,[mem,#Eifr]
BIC R0,R0,#%10000

STRB R0,[mem,#Eifr]
LDRB R0,fe09
;CMP R0,#ASC"*"
;SWIEQ &100+ASC"h"
;SWINE &100+ASC"H"
;MOV R0,#ASC"*"

MOV PC,R14

.tape_fetch
;SWI &100+ASC"b"
;LDR R0,[mem,#tapeR]
;MOV R0,#&3400 ; 2000000/(1200/8)~=1200 baud
MOV R0,#&6000
ADDS R1,R1,R0
MOVLE R1,#&6000

LDR R0,[mem,#Elatch]
TST R0,#%110 ; casette input mode?
MOVNE R1,#&100000

TST R0,#%1000000 ; is *Motor on?
MOVEQ R1,#&100000

STR R1,[mem,#tape_count]

MOVEQ PC,R14

LDRB R1,[mem,#tape_handle]
CMP R1,#0
MOVEQ PC,R14

.tape_get
;SWI &100+ASC"B"
SWI "XOS_BGet"
MOVVS R1,#0
STRVSB R1,[mem,#tape_handle]
MOVVS PC,R14

BCC tape_skip10

MOV R0,#1
MOV R2,#0
SWI "XOS_Args" ; rewind tape to start
MOVVS R1,#0
STRVSB R1,[mem,#tape_handle]
MOVVS PC,R14

.tape_skip10
;CMP R0,#ASC"*"
;SWIEQ &100+ASC"*"

CMP R0,#&FF
BNE not_FF
SWIEQ "XOS_BGet"
CMP R0,#&FF
BEQ not_FF

;MOV R0,R0,LSL#4

;LDRB R1,fe08_read
LDRB R1,[mem,#Eifr]

TST R0,#%100
BICEQ R1,R1,#%1000000
ORRNE R1,R1,#%1000000

STRB R1,[mem,#Eifr]

MOVEQ PC,R14

LDRB R0,[mem,#ier]
TST R0,#%1000000
MOVEQ PC,R14

;ORR R1,R1,#&80
;STRB R1,fe08_read
;SWI &100+ASC"F"
B do_interrupt
;B interrupt
;B skip_do_interrupt

.not_FF
STRB R0,fe09

;SWI &100+ASC"B"

;LDRB R0,fe08_write
;TST R0,#&80 ; receive interrupt enable bit
;MOVEQ PC,R14

;LDRB R0,fe08_read
;ORR R0,R0,#&81
;STRB R0,fe08_read
LDRB R0,[mem,#Eifr]
ORR R0,R0,#%10000
STRB R0,[mem,#Eifr]

;LDRB R12,[mem,#&C2]
;MOV R12,R12,LSL#24
;FNprint2(12)
;SWI &100+ASC" "

LDRB R0,[mem,#Eier]
TST R0,#%10000 ; receive interrupt enable bit
;SWIEQ &100+ASC"Q"
;MOVEQ PC,R14
;SWI &100+ASC"i"
B do_interrupt
;B interrupt
;MOV PC,R14

.dummy
MOV PC,R14


.strb8000      ; greater than 8000
]
IF master THEN
[OPTp
CMP R1,#&E000
BGE strb_rom_ret
CMP R1,#&C000
BGE strb_rom_ret2
CMP R1,#&9000
BGE strb_rom
]
ELSE
[OPTp
CMP R1,#&C000
BGE strb_rom_ret
]
ENDIF
[OPTp

LDRB R12,[mem,#rom]
TST R12,#&80
BEQ strb_rom

;SUB R13,mem,#(&8000+&B000) ; 4k Private RAM
;STRB R0,[R13,R1]
STRB R0,[mem,R1]
MOV PC,R14

.strb_rom
SUB R12,mem,#-ROMRAM
LDRB R13,[mem,#rom]
LDRB R13,[R12,R13]
CMP R13,#0
STREQB R0,[mem,R1]
MOV PC,R14
;B strb_rom_ret

.romsel
LDRB R12,[mem,#ROMSEL_ON]
CMP R12,#0
MOVNE PC,R14

LDRB R1,[mem,#rom]

LDR R12,roms_addr
AND R2,R0,#&F ; socket number
LDRB R1,[mem,#rom]
CMP R2,R1:MOVEQ PC,R14
AND R1,R1,#&F
AND R0,R0,#&F
STRB R0,[mem,#rom]
SUB R13,mem,#-ROMRAM
LDRB R13,[R13,R1]
CMP R13,#0 ; is the bank being paged out RAM?
BNE romsel2

TST R0,#%10000000 ; private RAM mapped in?
MOVEQ R13,#&8000
MOVNE R13,#&9000
AND R0,R0,#&F

ADD R2,R12,R1,LSL#14
ADDNE R2,R2,#&1000
ADD R12,R12,R0,LSL#14 ; R0*16*1024
ADDNE R12,R12,#&1000
ADR R1,romsel_loop_temp
STMIA R1,{R0,R4-R8,R14}
ADD mem,mem,R13
RSB R13,R13,#&C000
.romsel_loop
LDMIA mem,{R0,R1,R4,R5,R6,R7,R8,R14}
STMIA R2!,{R0,R1,R4,R5,R6,R7,R8,R14}
LDMIA R12!,{R0,R1,R4,R5,R6,R7,R8,R14}
STMIA (mem)!,{R0,R1,R4,R5,R6,R7,R8,R14}
SUBS R13,R13,#4*8
BNE romsel_loop
SUB mem,mem,#&C000
ADR R1,romsel_loop_temp
LDMIA R1,{R0,R4-R8,PC}
.romsel_loop_temp
EQUD 0:EQUD 0:EQUD 0:EQUD 0
EQUD 0:EQUD 0:EQUD 0:EQUD 0

.romsel_empty
ADD R13,R2,R2,LSL#8
ADD R13,R13,R13,LSL#16
ADD R0,mem,#&8000
STR R13,[R0,#0]
STR R13,[R0,#4]
STR R13,[R0,#8]
STR R13,[R0,#12]
MOV PC,R14

.romsel2

SUB R13,mem,#-ROMRAM
LDRB R13,[R13,R2]
CMP R13,#2 ; is the bank being paged out empty?
BEQ romsel_empty

TST R0,#%10000000 ; private RAM mapped in?
MOVEQ R13,#&8000
MOVNE R13,#&9000
AND R0,R0,#&F


ADD R12,R12,R0,LSL#14 ; R0*16*1024
ADDNE R12,R12,#&1000
ADD mem,mem,R13
RSB R13,R13,#&C000
ADR R1,romsel_loop_temp
STMIA R1,{R0,R4-R8,R14}
.romsel2_loop
LDMIA  R12 !,{R0,R1,R4,R5,R6,R7,R8,R14}
STMIA (mem)!,{R0,R1,R4,R5,R6,R7,R8,R14}
;LDR R1,[R12],#4
;STR R1,[mem],#4 ; store byte from ROM in main memory map
SUBS R13,R13,#4*8
BNE romsel2_loop
SUB mem,mem,#&C000
ADR R1,romsel_loop_temp
LDMIA R1,{R0,R4-R8,PC}

.link
EQUD 0

FNscreen

.write_palette
AND R1,R1,#7
SUB R12,mem,#-pal_regs
LDRB R2,[R12,R1]
CMP R0,R2:MOVEQ PC,R14
STRB R0,[R12,R1]

LDR R1,[mem,#Palette]
CMP R1,#0
MOVNE PC,R14

MOV R1,#255:STRB R1,[mem,#pal_tamper]
MOV PC,R14

.update_pal
LDR R1,[mem,#Palette]
CMP R1,#0
MOVNE PC,R14
.force_update_pal
LDRB R1,[mem,#fe20]
;TST R1,#%10
;MOVNE PC,R14 ; mode 7
AND R1,R1,#%11100
CMP R1,#%11100 : BEQ twocolpal
CMP R1,#%01000 : BEQ twocolpal
CMP R1,#%11000 : BEQ fourcolpal
CMP R1,#%00100 : BEQ fourcolpal


.sixteencolpal
LDRB R1,[mem,#pal_regs+0]
LDRB R2,[mem,#pal_regs+1]

MOV R0,#0
TST R2,#%1 ; r0
ORREQ R0,R0,#%1
TST R2,#%10000 ; g0
ORREQ R0,R0,#%10
TST R1,#%10000 ; b0
ORREQ R0,R0,#%100

SWI &100+19
SWI &100+0
SWI "OS_WriteC"
SWI &100
SWI &100
SWI &100

MOV R0,#0
TST R2,#%10 ; r2
ORREQ R0,R0,#%1
TST R2,#%100000 ; g2
ORREQ R0,R0,#%10
TST R1,#%100000 ; b2
ORREQ R0,R0,#%100

SWI &100+19
SWI &100+2
SWI "OS_WriteC"
SWI &100
SWI &100
SWI &100

MOV R0,#0
TST R2,#%100 ; r8
ORREQ R0,R0,#%1
TST R1,#%100 ; g8
ORREQ R0,R0,#%10
TST R1,#%1000000 ; b8
ORREQ R0,R0,#%100

SWI &100+19
SWI &100+8
SWI "OS_WriteC"
SWI &100
SWI &100
SWI &100

MOV R0,#0
TST R2,#%1000 ; r10
ORREQ R0,R0,#%1
TST R1,#%1000 ; g10
ORREQ R0,R0,#%10
TST R1,#%10000000 ; b10
ORREQ R0,R0,#%100

SWI &100+19
SWI &100+10
SWI "OS_WriteC"
SWI &100
SWI &100
SWI &100

LDRB R1,[mem,#pal_regs+2]
LDRB R2,[mem,#pal_regs+3]

MOV R0,#0
TST R2,#%1 ; r4
ORREQ R0,R0,#%1
TST R2,#%10000 ; g4
ORREQ R0,R0,#%10
TST R1,#%10000 ; b4
ORREQ R0,R0,#%100

SWI &100+19
SWI &100+4
SWI "OS_WriteC"
SWI &100
SWI &100
SWI &100

MOV R0,#0
TST R2,#%10 ; r6
ORREQ R0,R0,#%1
TST R2,#%100000 ; g6
ORREQ R0,R0,#%10
TST R1,#%100000 ; b6
ORREQ R0,R0,#%100

SWI &100+19
SWI &100+6
SWI "OS_WriteC"
SWI &100
SWI &100
SWI &100

MOV R0,#0
TST R2,#%100 ; r12
ORREQ R0,R0,#%1
TST R1,#%100 ; g12
ORREQ R0,R0,#%10
TST R1,#%1000000 ; b12
ORREQ R0,R0,#%100

SWI &100+19
SWI &100+12
SWI "OS_WriteC"
SWI &100
SWI &100
SWI &100

MOV R0,#0
TST R2,#%1000 ; r14
ORREQ R0,R0,#%1
TST R1,#%1000 ; g14
ORREQ R0,R0,#%10
TST R1,#%10000000 ; b14
ORREQ R0,R0,#%100

SWI &100+19
SWI &100+14
SWI "OS_WriteC"
SWI &100
SWI &100
SWI &100

LDRB R1,[mem,#pal_regs+4]
LDRB R2,[mem,#pal_regs+5]

MOV R0,#0
TST R2,#%1 ; r5
ORREQ R0,R0,#%1
TST R2,#%10000 ; g5
ORREQ R0,R0,#%10
TST R1,#%10000 ; b5
ORREQ R0,R0,#%100

SWI &100+19
SWI &100+5
SWI "OS_WriteC"
SWI &100
SWI &100
SWI &100

MOV R0,#0
TST R2,#%10 ; r7
ORREQ R0,R0,#%1
TST R2,#%100000 ; g7
ORREQ R0,R0,#%10
TST R1,#%100000 ; b7
ORREQ R0,R0,#%100

SWI &100+19
SWI &100+7
SWI "OS_WriteC"
SWI &100
SWI &100
SWI &100

MOV R0,#0
TST R2,#%100 ; r13
ORREQ R0,R0,#%1
TST R1,#%100 ; g13
ORREQ R0,R0,#%10
TST R1,#%1000000 ; b13
ORREQ R0,R0,#%100

SWI &100+19
SWI &100+13
SWI "OS_WriteC"
SWI &100
SWI &100
SWI &100

MOV R0,#0
TST R2,#%1000 ; r15
ORREQ R0,R0,#%1
TST R1,#%1000 ; g15
ORREQ R0,R0,#%10
TST R1,#%10000000 ; b15
ORREQ R0,R0,#%100

SWI &100+19
SWI &100+15
SWI "OS_WriteC"
SWI &100
SWI &100
SWI &100

LDRB R1,[mem,#pal_regs+6]
LDRB R2,[mem,#pal_regs+7]

MOV R0,#0
TST R2,#%1 ; r1
ORREQ R0,R0,#%1
TST R2,#%10000 ; g1
ORREQ R0,R0,#%10
TST R1,#%10000 ; b1
ORREQ R0,R0,#%100

SWI &100+19
SWI &100+1
SWI "OS_WriteC"
SWI &100
SWI &100
SWI &100

MOV R0,#0
TST R2,#%10 ; r3
ORREQ R0,R0,#%1
TST R2,#%100000 ; g3
ORREQ R0,R0,#%10
TST R1,#%100000 ; b3
ORREQ R0,R0,#%100

SWI &100+19
SWI &100+3
SWI "OS_WriteC"
SWI &100
SWI &100
SWI &100

MOV R0,#0
TST R2,#%100 ; r9
ORREQ R0,R0,#%1
TST R1,#%100 ; g9
ORREQ R0,R0,#%10
TST R1,#%1000000 ; b9
ORREQ R0,R0,#%100

SWI &100+19
SWI &100+9
SWI "OS_WriteC"
SWI &100
SWI &100
SWI &100

MOV R0,#0
TST R2,#%1000 ; r11
ORREQ R0,R0,#%1
TST R1,#%1000 ; g11
ORREQ R0,R0,#%10
TST R1,#%10000000 ; b11
ORREQ R0,R0,#%100

SWI &100+19
SWI &100+11
SWI "OS_WriteC"
SWI &100
SWI &100
SWI &100

MOV PC,R14

.twocolpal
LDRB R1,[mem,#pal_regs+0]
LDRB R2,[mem,#pal_regs+1]
MOV R0,#0
TST R2,#%1 ; r0
ORREQ R0,R0,#%1
TST R2,#%10000 ; g0
ORREQ R0,R0,#%10
TST R1,#%10000 ; b0
ORREQ R0,R0,#%100

SWI &100+19
SWI &100+0
SWI "OS_WriteC"
SWI &100
SWI &100
SWI &100

MOV R0,#0
TST R2,#%100 ; r1
ORREQ R0,R0,#%1
TST R1,#%100 ; g1
ORREQ R0,R0,#%10
TST R1,#%1000000 ; b1
ORREQ R0,R0,#%100

SWI &100+19
SWI &100+3 ; mode 4 fix
SWI "OS_WriteC"
SWI &100
SWI &100
SWI &100
MOV PC,R14

.fourcolpal
LDRB R1,[mem,#pal_regs+0]
LDRB R2,[mem,#pal_regs+1]
MOV R0,#0
TST R2,#%1 ; r0
ORREQ R0,R0,#%1
TST R2,#%10000 ; g0
ORREQ R0,R0,#%10
TST R1,#%10000 ; b0
ORREQ R0,R0,#%100

SWI &100+19
SWI &100+0
SWI "OS_WriteC"
SWI &100
SWI &100
SWI &100

MOV R0,#0
TST R2,#%10 ; r1
ORREQ R0,R0,#%1
TST R2,#%100000 ; g1
ORREQ R0,R0,#%10
TST R1,#%100000 ; b1
ORREQ R0,R0,#%100

SWI &100+19
SWI &100+1
SWI "OS_WriteC"
SWI &100
SWI &100
SWI &100

MOV R0,#0
TST R2,#%100 ; r2
ORREQ R0,R0,#%1
TST R1,#%100 ; g2
ORREQ R0,R0,#%10
TST R1,#%1000000 ; b2
ORREQ R0,R0,#%100

SWI &100+19
SWI &100+2
SWI "OS_WriteC"
SWI &100
SWI &100
SWI &100

MOV R0,#0
TST R2,#%1000 ; r3
ORREQ R0,R0,#%1
TST R1,#%1000 ; g3
ORREQ R0,R0,#%10
TST R1,#%10000000 ; b3
ORREQ R0,R0,#%100

SWI &100+19
SWI &100+3
SWI "OS_WriteC"
SWI &100
SWI &100
SWI &100

MOV PC,R14

.write_screen_start_low
AND R0,R0,#%11100000
STRB R0,[mem,#crt_regs+13]
MOV R0,#1 : STRB R0,[mem,#tamper]
MOV PC,R14

.read_screen_start_low
LDRB R0,[mem,#crt_regs+13]
MOV PC,R14

.write_screen_start_high
AND R0,R0,#%00111111
STRB R0,[mem,#crt_regs+12]
MOV R0,#1 : STRB R0,[mem,#tamper]
MOV PC,R14

.read_screen_start_high
LDRB R0,[mem,#crt_regs+12]
MOV PC,R14

.write_iscr ; &FE00

LDRB R1,[mem,#Eier]

TST R0,#&80
ORREQ R1,R1,R0
BICNE R1,R1,R0
AND R1,R1,#%01111100
STRB R1,[mem,#Eier]
MOV PC,R14



TST R0,#&80
;SWIEQ &100+ASC"["
;SWINE &100+ASC"]"
AND R0,R0,#%01111100
STRB R0,[mem,#Eier]
;SWI &100+ASC"["
;MOV R12,R0,LSL#24
;FNprint2(12)
MOV PC,R14

.read_iscr  ; &FE00
LDRB R0,[mem,#Eifr]
BIC R1,R0,#%10
STRB R1,[mem,#Eifr]

;LDRB R1,[mem,#Eier]
;ANDS R1,R1,R0
BICS R1,R0,#%11
ORRNE R0,R0,#%1 ; master IRQ bit

;BIC R0,R0,#%1000000
;LDRB R1,[mem,#&C2]
;CMP R1,#1
;ORREQ R0,R0,#%1000000
;CMP R1,#2
;BICEQ R0,R0,#%1000000
;ORREQ R0,R0,#%1000000

MOV PC,R14

.recalc_wrap
LDRB R0,[mem,#Elatch]
AND R0,R0,#%00111000 ; screen mode
MOV R0,R0,LSR#1
ADR R1,mode_table
LDR R0,[R1,R0]

BIC F,F,#&FF000000
BIC F,F,#&00FF0000
ORR F,F,R0,LSL#16 ; wrap_addr

MOV PC,R14

.counter_last
EQUD 0

.write_counter
LDRB R1,R14store+4
CMP R0,R1:MOVEQ PC,R14

STR R14,R14store
ADD R0,R0,#1
STRB R0,R14store+4

LDR R0,[mem,#min]
SUB R0,R0,time
LDR R1,[mem,#sound_timer]
SUB R1,R1,R0
LDR R2,counter_last
STR R1,counter_last
SUB R1,R2,R1
CMP R1,#200
;SWILT &100+ASC"s"
BGE skip_noise

MOV R0,#%11100100 ; low frequency noise
STRB R0,sound_data
MOV R0,#0 : BL sound_latch
MOV R0,#%11110000 ; maximum volume noise
STRB R0,sound_data
MOV R0,#0 : BL sound_latch
MOV R0,#%11011111 ; channel 1 volume 0
STRB R0,sound_data
MOV R0,#0 : BL sound_latch

LDR PC,R14store
;B skip_noise2

.skip_noise
MOV R0,#%11111111 ; noise volume 0
STRB R0,sound_data
MOV R0,#0 : BL sound_latch

.skip_noise2
LDRB R0,R14store+4

MOV R0,R0,LSL#2
AND R0,R0,#%1111
ORR R0,R0,#%11000000 ; tone 1 freq
STRB R0,sound_data
MOV R0,#0
BL sound_latch
LDRB R0,R14store+4
MOV R0,R0,LSR#2
STRB R0,sound_data
LDR R14,R14store
MOV R0,#0
B sound_latch

.R14store
EQUD 0
EQUD 0

.write_latch
STRB R0,[mem,#Elatch]

STR R14,R14store
TST R0,#%10
MOVEQ R0,#%11011111 ; channel 1 volume 0
MOVNE R0,#%11010000 ; channel 1 volume 15
STRB R0,sound_data
MOV R0,#0
BL sound_latch

MOV R0,#%11111111 ; noise volume 0
STRB R0,sound_data
MOV R0,#0 : BL sound_latch

LDR R14,R14store
LDRB R0,[mem,#Elatch]

AND R0,R0,#%00111000 ; screen mode
LDRB R1,mode
CMP R0,R1
MOVEQ PC,R14
STRB R0,mode

MOV R1,#1 : STRB R1,[mem,#tamper]

CMP R0,#7 << 3
ORREQ F,F,#1 << 12
BICNE F,F,#1 << 12
SWIEQ &100+12

CMP R0,#3 << 3
MOVLE R1,#80
MOVGT R1,#40
STRB R1,[mem,#crt_regs+1] ; horizontal characters
MOV R0,R0,LSR#1
ADR R1,mode_table
LDR R0,[R1,R0]

BIC F,F,#&FF000000
BIC F,F,#&00FF0000
ORR F,F,R0,LSL#16 ; wrap_addr

MOV R0,R0,LSR#16
AND R1,R0,#&FF
STRB R1,[mem,#crt_regs+6] ; vertical characters
MOV R1,#&24
STRB R1,[mem,#crt_regs+3] ; misc.
MOV R0,R0,LSR#8
STRB R0,[mem,#fe20]
B poke_updatepixelV ; includes MOV PC,R14

.mode
EQUD 0

.mode_table
EQUD &9C203000 ; mode 0
EQUD &D8203000 ; mode 1
EQUD &F4203000 ; mode 2
EQUD &9C194000 ; mode 3
EQUD &88205800 ; mode 4
EQUD &C4205800 ; mode 5
EQUD &88196000 ; mode 6
EQUD &88196000 ; (mode 7)

.read_latch
LDRB R0,[mem,#Elatch]
MOV PC,R14

.write_ROMint
STRB R0,[mem,#ROMint]
LDRB R1,[mem,#Eifr]
TST R0,#%10000
BICNE R1,R1,#%100
;SWINE &100+ASC"/"
TST R0,#%100000
BICNE R1,R1,#%1000
;SWINE &100+ASC"."
TST R0,#%1000000
BICNE R1,R1,#%1000000 ; clear (some?) tape interrupts
;SWINE &100+ASC","
STRB R1,[mem,#Eifr]
AND R0,R0,#%1111
CMP R0,#8
CMPNE R0,#9
ORREQ F,F,#1 << 11
BICNE F,F,#1 << 11
;SWIEQ &100+ASC"1"
;SWINE &100+ASC"0"
BNE romsel
MOV PC,R14

.read_ROMint
.read_counter
.write_tape_data
.read_palette
MOV PC,R14

FNsound_latch
FNsound_misc

.osbput
MOV R0,A,LSR#24
MOV R1,Y,LSR#24
SWI "XOS_BPut"
BVS swi_error
B opcode(&60) ; rts

.osbget
MOV R0,A,LSR#24
MOV R1,Y,LSR#24
SWI "XOS_BGet"
BVS swi_error
MOV A,R0,LSL#24
FNsetupC
B opcode(&60) ; rts

.swi_error
ADD mem,mem,#&100
ADD mem,mem,#&002
MOV R1,#0 ; BRK
STRB R1,[mem,#-2]
LDRB R1,[R0] ; error no
STRB R1,[mem,#-1]
ADD R0,R0,#4
MOV R14,#0

.swi_err_loop
LDRB R13,[R0,R14]
CMP R13,#0
;MOV R13,#ASC"A"
STRB R13,[mem,R14]
ADD R14,R14,#1
MOVEQ R14,#255
CMP R14,#253
BLE swi_err_loop

MOV zpc,#&100 << 16
SUB mem,mem,#&100
SUB mem,mem,#&002
FNfetch2




.strb_rom_ret

.sheila
SUBS R2,R1,#&FE00
MOVLT PC,R14
SUBS R2,R2,#&100
MOVGE PC,R14
;BGE FFpage

TST time,#%1
SUBNE time,time,#1
SUBEQ time,time,#2

;STRB R0,[mem,R1]
BIC R1,R1,#&F0 ; elk
SUB R2,mem,#&10000:STRB R0,[R2,R1]

AND R2,R1,#&F
;ADR R1,sheila_writetab
LDR PC,[PC,R2,LSL#2]
EQUD 0 ; padding for pipeline
.sheila_writetab
]
FOR II%=0 TO 15
[OPTp
EQUD write_iscr
EQUD dummy
EQUD write_screen_start_low
EQUD write_screen_start_high
EQUD write_tape_data
EQUD write_ROMint
EQUD write_counter
EQUD write_latch
FNequd(8,write_palette)
]
NEXT
[OPTp

.ldrb_FFpage
;SUB time,time,#1
MOV PC,R14

.ldrb8000 ; greater than 8000

CMP R1,#&FE00
BHS ldrb_sheila

LDRB R0,[mem,R1]
MOV PC,R14


;MOV R1,R1,LSR#16
]
IF master THEN
[OPTp
.ldrb16_8000 ; greater than 8000

CMP R1,#&FE00 << 16
BHS ldrb16_sheila

LDRB R0,[mem,R1,LSR#16]
MOV PC,R14

.ldrb16_screen
CMP R1,#&8000 << 16
BHS ldrb16_8000

LDRB R12,[mem,#ACCCON]

CMP zpc,#&C000 << 16
MOVLT R13,R12,LSR#1
MOVGE R13,R12
CMP zpc,#&E000 << 16
MOVGE R13,R12,LSR#1    ; now bit 1 of R13 is what
                       ; we must look at

TST R13,#%10
SUBNE R13,mem,#(&3000+&10000) ; shadow screen memory
;MOVEQ R13,mem
LDRNEB R0,[R13,R1,LSR#16]
LDREQB R0,[mem,R1,LSR#16]
MOV PC,R14
]
ELSE
[OPTp
.ldrb16_screen
CMP R1,#&FE00 << 16
BHS ldrb16_sheila

LDRB R0,[mem,R1,LSR#16]
MOV PC,R14
]
ENDIF

IF master THEN
[OPTp

.ldrb_screen
.ldrb3000 ; greater than 3000

CMP R1,#&8000
BHS ldrb8000

LDRB R12,[mem,#ACCCON]

CMP zpc,#&C000 << 16
MOVLT R13,R12,LSR#1
MOVGE R13,R12
CMP zpc,#&E000 << 16
MOVGE R13,R12,LSR#1    ; now bit 1 of R13 is what
                       ; we must look at

TST R13,#%10
SUBNE R13,mem,#(&3000+&10000) ; shadow screen memory
;MOVEQ R13,mem
LDRNEB R0,[R13,R1]
LDREQB R0,[mem,R1]
MOV PC,R14
]
ELSE
[OPTp
.ldrb_screen
.ldrb3000 ; greater than 3000
CMP R1,#&FE00
BHS ldrb_sheila
LDRB R0,[mem,R1]
MOV PC,R14
]
ENDIF

[OPTp

.ldrb16_sheila
MOV R12,R1,LSR#16
B ldrb_sheila2

.ldrb16_8000
MOV R1,R1,LSR#16

.ldrb_8000
CMP R1,#&FE00
BHS ldrb_sheila
CMP R1,#&C000
MOVHS PC,R14

CMP zpc,#&8000<<16
BLO key_skip ; fix for stryker's run

TST F,#1 << 11
MOVEQ PC,R14
.key_skip

;SWI &100+ASC"K"

STMFD mem,{R1-R2,R12-R13}

; electron keyboard
EOR R0,R1,#&FF
EOR R0,R0,#&FF00
BIC R0,R0,#%1100000000000000
LDR R2,[mem,#key_addr]
MOV R12,#&F0

LDR R13,[R2,#0]
ANDS R13,R13,R0
ORRNE R12,R12,#1

LDR R13,[R2,#4]
ANDS R13,R13,R0
ORRNE R12,R12,#2

LDR R13,[R2,#8]
ANDS R13,R13,R0
ORRNE R12,R12,#4

LDR R13,[R2,#12]
ANDS R13,R13,R0
ORRNE R12,R12,#8

MOV R0,R12
;ANDS R12,R12,#&F
;SWINE &100+ASC"K"
LDMEA mem,{R1-R2,R12-R13}
MOV PC,R14

.ldrb_sheila
MOV R12,R1

.ldrb_sheila2
LDRB R0,[mem,R12]

SUBS R2,R12,#&FE00
MOVLT PC,R14
SUBS R2,R2,#&100
BGE ldrb_FFpage

BIC R12,R12,#&F0 ; elk
SUB R2,mem,#&10000:LDRB R0,[R2,R12]

SUB time,time,#1

AND R2,R12,#&FF
;ADR R1,sheila_readtab
LDR PC,[PC,R2,LSL#2]
EQUD 0 ; padding for pipeline
.sheila_readtab
]
FOR II%=0 TO 15
[OPTp
EQUD read_iscr
EQUD dummy
EQUD read_screen_start_low
EQUD read_screen_start_high
EQUD read_tape_data
EQUD read_ROMint
EQUD read_counter
EQUD read_latch
FNequd(8,read_palette)
]
NEXT
[OPTp

FNalign16 ; fit into cache better?

FNopcodes

.patch_screen
MOV PC,R14
.patch_pixel
MOV PC,R14

.end
]
NEXT
REM OSCLI"Load <6502Em$Dir>.SRC.revtable "+STR$~(code+mode0tab)
REM OSCLI"Load <6502Em$Dir>.SRC.mode1tab "+STR$~(code+mode1tab)
REM OSCLI"Load <6502Em$Dir>.SRC.Hmode2tab "+STR$~(code+mode2tab)
REM OSCLI"Load <6502Em$Dir>.SRC.Hmode4tab "+STR$~(code+mode4tab)
REM OSCLI"Load <6502Em$Dir>.SRC.Hmode5tab "+STR$~(code+mode5tab)
OSCLI"Load <6502Em$Dir>.AllSource.65SupData.revtable "+STR$~(code+mode0tab)
OSCLI"Load <6502Em$Dir>.Tables.mode1tab "+STR$~(code+mode1tab)
OSCLI"Load <6502Em$Dir>.AllSource.65SupData.mode2tab "+STR$~(code+mode2tab)
OSCLI"Load <6502Em$Dir>.Tables.mode4tab "+STR$~(code+mode4tab)
OSCLI"Load <6502Em$Dir>.Tables.mode5tab "+STR$~(code+mode5tab)

ENDPROC

DE
DEFF


DEFFNldrb2(R,S)
IF R<>0 OR S<>1 THEN STOP
IF master THEN
[OPTp
;LDRB R,[mem,S]
;CMP S,#&FE00
;BLHS ldrb_sheila
CMP S,#&3000
LDRLOB R,[mem,S]
BLHS ldrb_screen
]
ELSE
[OPTp
LDRB R,[mem,S]
;CMP S,#&FE00
;BLHS ldrb_sheila
CMP S,#&8000
BLHS ldrb_8000
]
ENDIF
=""

DEFFNldrb16(R,S)
IF R<>0 OR S<>1 THEN STOP
IF master THEN
[OPTp
;LDRB R,[mem,S,LSR#16]
;CMP S,#&FE00 << 16
;BLHS ldrb16_sheila
CMP S,#&3000 << 16
LDRLOB R,[mem,S,LSR#16]
BLHS ldrb16_screen
]
ELSE
[OPTp
LDRB R,[mem,S,LSR#16]
;CMP S,#&FE00 << 16
;BLHS ldrb16_sheila
CMP S,#&8000 << 16
BLHS ldrb16_8000
]
ENDIF
=""

DEFFNstrb(R,S)
IF R<>0 OR S<>1 THEN ERROR
[OPTp
CMP S,F,LSR#16 ; wrap_addr
;CMP S,#&3000
STRLTB R,[mem,S]
BLGE strb
]
=""

DEFFNstrb16(R,S)
IF R<>0 OR S<>1 THEN ERROR
[OPTp
;CMP S,#&C000 << 16
;STRLOB R,[mem,S,LSR#16]
MOV S,S,LSR#16
CMP S,F,LSR#16 ; wrap_addr
;CMP S,#&3000
STRLTB R,[mem,S]
BLGE strb ; 16
]
=""

DEFFNshowregs
[OPTp
FNprint(zpc)
FNprint(A)
FNprint(X)
FNprint(Y)
FNprint(zSP)
FNprint(F)
ADD R12,mem,#&DF00
LDRB R12,[R12,#&DA]
MOV R12,R12,LSL#24
FNprint2(12)
SWI &10A
;SWI "OS_NewLine"
]
=""

DEFFNprint(R)
CASE R OF
WHEN zpc : A$=FNprint4(R)
WHEN F   : [OPTp:MOV R2,F,LSL#24:FNprint2(2):]
OTHERWISE
A$=FNprint2(R)
ENDCASE
=""

WHEN A   : A$=FNprint2(R)
WHEN X   : A$=FNprint2(R)
WHEN Y   : A$=FNprint2(R)
WHEN zSP  : [OPTp:SWI &100+ASC"1":FNprint2(zSP):]
WHEN F   : A$=FNprintflags
ENDCASE
=""

DEFFNprintflags
[OPTp
TST F,#%1<<7 : SWIEQ &100+ASC"n" : SWINE &100+ASC"N"
TST F,#%1<<6 : SWIEQ &100+ASC"v" : SWINE &100+ASC"V"
TST F,#%1<<5 : SWIEQ &100+ASC"0" : SWINE &100+ASC"1"
TST F,#%1<<4 : SWIEQ &100+ASC"b" : SWINE &100+ASC"B"
TST F,#%1<<3 : SWIEQ &100+ASC"d" : SWINE &100+ASC"D"
TST F,#%1<<2 : SWIEQ &100+ASC"i" : SWINE &100+ASC"I"
TST F,#%1<<1 : SWIEQ &100+ASC"z" : SWINE &100+ASC"Z"
TST F,#%1<<0 : SWIEQ &100+ASC"c" : SWINE &100+ASC"C"
SWI &120
]
=""

DEFFNprint2(R)
LOCALI%
[OPTp
MOV R1,R
]
FORI%=0 TO 1
[OPT p
MOV R1,R1,ROR#28
AND R0,R1,#&F
CMP R0,#10
ADDGE R0,R0,#7
ADD R0,R0,#48
SWI "OS_WriteC"
]
NEXT
[OPTp
SWI &120
]
=""

DEFFNprint4(R)
LOCALI%
[OPTp
MOV R1,R
]
FORI%=0 TO 3
[OPT p
MOV R1,R1,ROR#28
AND R0,R1,#&F
CMP R0,#10
ADDGE R0,R0,#7
ADD R0,R0,#48
SWI "OS_WriteC"
]
NEXT
[OPTp
SWI &120
]
=""

DEFFNprint32(R)
LOCALI%
[OPTp
MOV R1,R
]
FORI%=0 TO 31
[OPT p
MOV R1,R1,ROR#28
AND R0,R1,#&F
CMP R0,#10
ADDGE R0,R0,#7
ADD R0,R0,#48
SWI "OS_WriteC"
]
NEXT
[OPTp
SWI &120
]
=""

DEFFNprints(A$)
[OPTp
SWI "OS_WriteS"
EQUS A$
EQUB 10
EQUB 13
EQUB 0
ALIGN
]
=""

DEFFNundoc(A%)
IF opcode%<>A% THEN STOP
[OPTp
;TST F,#%1000
;SWIEQ &100+ASC"d"
;SWINE &100+ASC"D"

;SWI &100+ASC(LEFT$(RIGHT$("0"+STR$~A%,2),1))
;SWI &100+ASC(RIGHT$(STR$~A%,1))
;SWI &100+ASC" "
;FNprint(zpc)
;SWI &100+ASC" ":;SWI &100+ASC" "

;MOV R0,#15 : ;SWI "OS_Byte"
;SWI 4
]
=""

DEFFNequd(A%,B%)
LOCALI%
FORI%=1 TO A%
[OPTp
EQUD B%
]
NEXT
=""

DEFFNdo_interrupt
[OPTp
;SWI &100+ASC"I"
MOV R0,zpc,LSR#24
FNpush(0)
MOV R0,zpc,LSR#16
FNpush(0)
BIC F,F,#%10000 ; clear BRK flag
FNpush(F)
ORR F,F,#%100 ; !!!!!!
   MOV R0,#&FF00
ADD R0,R0,#&00FC ;not 00FE - this gives a rotated load...so ARMv7 exception!!!
LDR zpc,[mem,R0]      ; load from FFFC  /SH
MOV zpc,zpc,LSR#16    ; shift right (to emulate rotated load)
MOV zpc,zpc,LSL#16    ;  ...as before
]
=""

DEFFNdivmod(A,B,C,D,E)
div%+=1
[OPTp
MOV C,#1
MOV D,#0
MOV E,B
.divloop1(div%)
MOV B,B,LSL#1
MOV C,C,LSL#1
CMP B,A
BLO divloop1(div%)

.divloop2(div%)
CMP B,A : BLS divjump(div%)
CMP B,E : BLS divjump(div%)
MOV B,B,LSR#1
MOV C,C,LSR#1
B divloop2(div%)
.divjump(div%)
CMP B,A
SUBLS A,A,B
ADDLS D,D,C
CMP B,E
BHI divloop2(div%)
]
=""

DEFFNshadow
IF master THEN
[OPTp
LDRB R2,[mem,#ACCCON]
;EOR R2,R2,R2,LSR#2
TST R2,#%1
SUBNE R13,mem,#&13000
MOVEQ R13,mem
]
ELSE
[OPTp
MOV R13,mem
]
ENDIF
=""

DEFPROCclearmem(S%,E%)
P%=buffer
[OPT2
EQUD S% ; memory
EQUD E% ; memory+&8000
.clear
MOV R0,#0
LDR R1,buffer
LDR R2,buffer+4
.loop
STR R0,[R1],#4
CMP R1,R2
BNE loop
MOV PC,R14
]
CALL clear
ENDPROC

DEFFNfetch2
[OPTp
LDRB R2,[mem,zpc,LSR#16]
ADD PC,table,R2,LSL#8
]
=""

DEFFNfetch3(N%,T%)
IF N%<>0 THEN [OPTp:ADD zpc,zpc,#N% << 16:]
[OPTp
FNshowregs2
SUBS time,time,#T%
LDRPLB R2,[mem,zpc,LSR#16]
ADDPL PC,table,R2,LSL#8
B fetch2
]
=""

DEFFNfetch(N%,T%)
IF N%<>0 THEN [OPTp:ADD zpc,zpc,#N% << 16:]
[OPTp
FNshowregs2
SUBS time,time,#T%
LDRPLB R2,[mem,zpc,LSR#16]
ADDPL PC,table,R2,LSL#8
B fetch2
]
opcode%+=1
IF bcd_loop%=0 THEN
IF opcode(opcode%-1)=0 THEN STOP
IF opcode(opcode%)<>0 AND p=0 THEN STOP
IF P%-opcode(0)>opcode%*4*64 THEN PRINT~opcode%
P%=opcode(0)+opcode%*4*64
O%=code+P%
ELSE
P%=bcd(0)+opcode%*4*64
O%=code+P%
ENDIF
=""
DEFFNbcd(A%) :
IF P%>opcode(0)+(A%+256)*4*64 THEN STOP
P%=opcode(0)+(A%+256)*4*64 : O%=code+P% : =""

DEFFNalign16
WHILE (P% AND 15)<>0
P%+=1 : O%+=1
ENDWHILE
=""
DEF PROCerror
REPORT:PRINT " at line ";ERL
END

DEFFNshowregs2
[OPTp
;BL show_regs
]
=""
